 /****************************************************************************************
* RyRFit is a program designed to place boxes with the correct dimensions and orientation
* at the positions of RyR tetramers in tomographic images of dyads of mammalian cardiomyocytes.
* The images, which  are in the TIFF format, consist of sequential parallel planes, betwen 0.5
* and 1 nm apart, through the plane of the dyad and are generated by the Amira program (Thermo
* Fisher Scientific - FEI). The tetramer is represented by an open rectangle with a default width
* of 27 nm (which can be changed).
*
* Tetramers are placed manually and can then be classified according to the scheme in
* Asghari et. al. Circ. Res. 115(2) 252-66, 2014. The program also calculates nearest
* neighbour distances as well as an alpha shape and a convex hull around the dyad, allowing
* and estimate of the area and the density (tetramers per unit area).
*
* Copyright David Scriven, 2012-2021.
*
* Moore Laboratory, Life Sciences Institute,  2350 Health Sciences
* Mall, University of British Columbia, Vancouver, Canada, V6T 1Z3
*
* This file, ryr_fit4_main.cpp, is part of the RyRFit program
*
* RyRFit links to the proprietary Qt system (currently ver 5.15.2) as well as the the free
* CGAL algorithmic library and the free TIFF library. On Windows it links to the Visual C++
* redistributable
*
* RyRFit is free software: you can redistribute it and/or modify it under the terms of the
* GNU General Public License as published by the Free Software Foundation, either version 3 of
* the License, or any later version.
*
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* See the GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with RyRFit.  If not, see <https://www.gnu.org/licenses/>.
*
**********************************************************************************************/
#ifdef WIN32
#include <QCoreApplication>
#else
#include "unistd.h"
#endif
#include <QGuiApplication>
#include <QScreen>
#include "interface.h"

int main(int argc, char *argv[])
{
#ifndef WIN32
    int status = fork();
    switch (status)
    {
    case -1:
    {
        std::cerr << "\nError - could not fork process\n\n";
        exit(1);
    }
    case 0: // child process
        break;
    default: /// parent process
        exit(0);
    }
    status = setsid();
    if (status == -1)
    {
        std::cerr << "\nError - could not get valid sid\n\n";
        exit(1);
    }
#else
     QCoreApplication::setAttribute(Qt::AA_UseDesktopOpenGL);
     QCoreApplication::setApplicationName("RyRFit.exe");
     QCoreApplication::setApplicationVersion("1.4");
     QCoreApplication::setOrganizationName("Moore Lab, Life Sciences Inst., Univ. British Columbia");
#endif
     QApplication app(argc, argv);
     QScreen* scrn = QApplication::primaryScreen();
     qreal Screenlogicaldpi = scrn->logicalDotsPerInch();
     QSize ScreenSize = scrn->availableSize();
     em_interface em(ScreenSize, Screenlogicaldpi);;
     em.show();
     return app.exec();
}
